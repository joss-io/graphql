package io.zrz.zulu.schema.model;

import com.google.common.collect.ImmutableList;

import io.zrz.zulu.schema.ResolvedType;
import io.zrz.zulu.schema.binding.BoundOperation;
import io.zrz.zulu.schema.model.ModelElementVisitor.FunctionVisitor;
import io.zrz.zulu.schema.model.ModelElementVisitor.VoidVisitor;

/**
 * a type generated by a selection that contains multiple named fields.
 * 
 * @author theo
 *
 */

public class ModelRootType implements ModelElement {

  private BoundOperation root;
  private ImmutableList<ModelElement> fields;

  public ModelRootType(BoundOperation op, ImmutableList<ModelElement> fields) {
    this.root = op;
    this.fields = fields;
  }

  @Override
  public void accept(VoidVisitor visitor) {
    visitor.visitModelRoot(this);
  }

  public ResolvedType type() {
    return root.selectionType();
  }

  public ImmutableList<ModelElement> selections() {
    return this.fields;
  }

  public BoundOperation selection() {
    return this.root;
  }

  @Override
  public <T, R> R accept(FunctionVisitor<T, R> visitor, T value) {
    return visitor.visitModelRoot(this, value);
  }

  public BoundOperation operation() {
    return this.root;
  }

  public String operationName() {
    return this.root.operationName();
  }

}
